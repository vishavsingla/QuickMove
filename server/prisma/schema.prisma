generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  phoneNumber        String              @unique
  hashedPassword     String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]
  verificationTokens VerificationToken[]
  bookings           Booking[]           @relation("UserBookings")
  Driver             Driver?
  Admin              Admin?
}

model Driver {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber   String              @unique
  licenseNumber String
  vehicleType   VehicleType
  vehicleNumber String
  isAvailable   Boolean   @default(true)
  bankAccNo     String?
  ifscCode      String?
  bookings      Booking[] @relation("DriverBookings")
}

enum VehicleType {
  BIKE
  CAR
  BIG_CAR
  TEMPO
  SMALL_TRUCK
  BIG_TRUCK
}


model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?
  refreshToken String?
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model Booking {
  id              String        @id @default(cuid())
  pickupLocation  String
  pickupLat       Float
  pickupLng       Float
  dropoffLocation String
  dropoffLat      Float
  dropoffLng      Float
  estimatedCost   Float
  status          BookingStatus @default(PENDING)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  userId          String
  user            User          @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  driverId        String?
  driver          Driver?       @relation("DriverBookings", fields: [driverId], references: [id], onDelete: SetNull)
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum BookingStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
