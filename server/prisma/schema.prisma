generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String              @unique
  phoneNumber        String              @unique
  hashedPassword     String
  role               Role                @default(USER)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  sessions           Session[]
  verificationTokens VerificationToken[]
  bookings           Booking[]           @relation("UserBookings")
  Driver             Driver?
  Admin              Admin?
  Notification       Notification[]
}

model Vehicle {
  id           String      @id @default(cuid())
  make         String?
  model        String?
  year         Int?
  licensePlate String
  driverId     String
  driver       Driver      @relation(fields: [driverId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  vehicleType  VehicleType
  status       String      @default("PENDING")
}

model Driver {
  id             String         @id @default(cuid())
  userId         String         @unique
  name           String
  hashedPassword String
  email          String
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  phoneNumber    String         @unique
  licenseNumber  String
  isAvailable    Boolean        @default(true)
  bankAccNo      String?
  ifscCode       String?
  bookings       Booking[]      @relation("DriverBookings")
  vehicles       Vehicle[]
  Notification   Notification[]
  city           String
  area           String
  currentLat     Float?
  currentLng     Float?
  status         String         @default("PENDING")
  vehicleType    VehicleType
  licensePlate  String
}

enum VehicleType {
  BIKE
  CAR
  BIG_CAR
  TEMPO
  SMALL_TRUCK
  BIG_TRUCK
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  accessToken  String?
  refreshToken String?
  expires      DateTime
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([identifier, token])
}

model Booking {
  id                String         @id @default(cuid())
  pickupLocation    String
  pickupLat         Float
  pickupLng         Float
  dropoffLocation   String
  dropoffLat        Float
  dropoffLng        Float
  estimatedCost     Float
  estimatedDistance Float
  status            BookingStatus  @default(PENDING)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  userId            String
  user              User           @relation("UserBookings", fields: [userId], references: [id], onDelete: Cascade)
  driverId          String?
  driver            Driver?        @relation("DriverBookings", fields: [driverId], references: [id], onDelete: SetNull)
  Notification      Notification[]
  scheduledTime     DateTime?
}

model Notification {
  id        String   @id @default(cuid())
  type      String
  message   String
  userId    String?
  driverId  String?
  bookingId String?
  createdAt DateTime @default(now())
  isRead    Boolean  @default(false)

  user    User?    @relation(fields: [userId], references: [id])
  driver  Driver?  @relation(fields: [driverId], references: [id])
  booking Booking? @relation(fields: [bookingId], references: [id])
}

enum Role {
  USER
  DRIVER
  ADMIN
}

enum BookingStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  COMPLETED
  REJECTED
  CANCELLED
}
